Flex Autocomplete

Getting started
Working with the data
Usability settings
Look and feel
Using it as an item editor
AdvancedAutoComplete
Custom skins
Useful stuff from comments
Odds and ends

Getting started

Thanks for checking out the documentation for this component. Hopefully you find it useful. 

The best way to figure this thing out is to use the Demo to see what options are available and then reference the source code for the examples to how it's implemented. It's also a good idea to skim through the methods and properties in the ASDoc file (as the demo doesn't use every property/method available). Here are the two files: AutoComplete and AdvancedAutoComplete.

Although the component doesn't extend from the ComboBox class, it's designed to have as similar an interface as possible. For example, it implements the filterFunction, labelFunction and selectedItems properties as well as others.

Here's the simplest possible implementation of the component.

[ch01ex01]

While there are a fair number of settings you can adjust, I'd like to start by the showing the way I generally use the component.

[ch01ex02]

I've set three properties which I'll review quickly here.
selectedItemStyleName: Controls the look of the selected items. There are three choices: macMail, facebook and underline. 
prompt: A string to display when no value is set.
backSpaceAction : Determines what to do when a user clicks backspace. By default we focus the item (ala Mac Mail) but this can be changed to remove it.
	

Working with the data

The first topic we'll cover is working with objects. Just like most other Flex components you can set either the labelField of labelFunction property. By default this will control how the item is displayed through out the component (in the drop down, once selected and in the browsers). 

You have a couple of choices for customizing the drop down label. You can set the dropDownLabelFunction which can return an HTML string to handle formatting the item. This is used in the email demo to display the person's email address (ie, Homer Simpson <homer@gmail.com>) in the drop down. If you'd like greater control you can set a dropDownItemRenderer. This can be seen in the Color Chooser demo.

To filter the data you can either use the built in options by setting the "matchType" property or create a custom filter by setting a value for the "filterFunction" property. The built in options are:

- beginning: Only match the beginning of the string 
- word: Match the beginning of any of the words in the string
- anyPart: Matches any part of the string

All of the built in options perform a case-insensitive search. Here's how you could use the filterFunction property to implement a case-sensisitve search.

[ch02ex01]

By default, the component requires the user to select an item from the list. You can allow the user to enter their own values by setting "allowNewValues" to true. You can then control where or new the new items are editable by setting the "allowEditingNewValues" property.

You can use either an ArrayCollection or an XMLListCollection as the dataProvider. We showed you an example with an ArrayCollection in the last chapter, here's an example using an XMLListCollection.

[ch02ex03]

Usability settings

AutoSelect

The AutoSelect functionality will automatically select an item if it matches a case-insensitive string comparison and is the only match found. This feature can be disabled by setting autoSelectEnabled to false. 

If you'd like to use a custom function to determine if an item should be auto-selected you can set a value for the autoSelectFunction property. Here's an example where we use this property to auto-select once when there is a single match. For example, typing "o" will select "one" right away.



allowDuplicates
allowMultipleSelection
dropDownRowCount
dropDownWidth
enableClearIcon
inlineButton
keyField
labelField
labelFunction
searchText
selectedItem
selectedItemId
selectedItems
showRemoveIcon 
text
actionsMenuDataProvider 
browseLabel 
browserClass
browserFields 
selectionLayout 
showBrowseButton
showOrderButtons 
showRemoveButton 
useListBuilder
events
isItemSelected
isSettingValue
isDrowDownVisible
search
showDropDown
hideDropDown
getNextItems
first class components
utility classes