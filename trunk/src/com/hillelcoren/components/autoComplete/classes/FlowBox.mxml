<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="com.hillelcoren.components.autoComplete.classes.*"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	borderStyle="inset" backgroundColor="#FFFFFF"
	initialize="init()" clipContent="true">
	
	<mx:Metadata>
		[Event(name="change")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.controls.VRule;
			import mx.core.Container;
			import mx.core.EdgeMetrics;
			import mx.core.IUIComponent;
			import com.hillelcoren.components.autoComplete.interfaces.iComboItem;
			
			private var _showRemoveIcon:Boolean;
			private var _showRemoveIconChanged:Boolean;
			
			private var _enableMultiRow:Boolean;
			
			private function init():void
			{
				addEventListener( MouseEvent.MOUSE_OVER, handleMouseOver );
				addEventListener( MouseEvent.MOUSE_OUT, handleMouseOut );				
								
				addEventListener( FocusEvent.FOCUS_IN, handleFocusIn );		
				addEventListener( FocusEvent.FOCUS_OUT, handleFocusOut );
			}

			private function handleMouseOver( event:MouseEvent ):void
			{
				buttonTextInput.buttonVisible = true;
			}
			
			private function handleMouseOut( event:MouseEvent ):void
			{
				buttonTextInput.buttonVisible = false;
			}
						
			private function handleFocusIn( event:Event ):void
			{
				drawFocus( true );				
			}
			
			private function handleFocusOut( event:Event ):void
			{
				drawFocus( false );
			}
			
			private function handleChange( event:Event ):void
			{
				dispatchEvent( event );
			}
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (_showRemoveIconChanged)
				{
					_showRemoveIconChanged = false;
					
					for each (var item:iComboItem in getChildren())
					{
						if (item is SelectedItem)
						{
							SelectedItem( item ).showRemoveIcon = _showRemoveIcon;	
						}						
					}
				}
			}
			
			public function getItemPosition( comboItem:iComboItem ):Point
			{
				var lastY:int;
				var col:uint;
				var row:uint;
				
				for each (var item:UIComponent in getChildren())
				{
					if (item.y > lastY)
					{
						col = 0;
						row++;
						lastY = item.y;
					}
					
					if (item == comboItem)
					{
						return new Point( col, row );
					}
					
					col++;
				}
				
				return null;
			}
			
			public function getItemByPosition( pos:Point ):iComboItem
			{
				var lastY:int;
				var row:uint;
				var col:int;
				var lastItem:UIComponent;
				
				for each (var item:UIComponent in getChildren())
				{
					if (item.y > lastY)
					{
						col = 0;
						lastY = item.y;
						row++;
					}
					
					if (row == pos.y && col == pos.x)
					{
						return item as iComboItem;
					}
					
					lastItem = item;
					col++;
				}
				
				return null;	
			}								
			
			public function set showRemoveIcon( value:Boolean ):void
			{
				_showRemoveIcon = value;
				_showRemoveIconChanged = true;
				
				invalidateProperties();
			}
			
			public function set enableMultiRow( value:Boolean ):void
			{
				_enableMultiRow = value;
			}
			

	        override protected function measure():void
	        {
	        	super.measure();
	        	
	        	var height:int;
	        	var tallest:int;
	        	var lastY:int;
	        	
	        	for each (var child:UIComponent in getChildren())
	        	{
	        		if (child.y > lastY)
	        		{
	        			height += tallest; 
	        			tallest = 0;
	        		}
	        		
	        		tallest = Math.max( tallest, child.getExplicitOrMeasuredHeight() );        		
	        		lastY = child.y
	        	}
	        	
	        	var vm:EdgeMetrics = viewMetricsAndPadding;
	        	height += tallest + vm.bottom;// + vm.top;
	        	
	        	measuredHeight = measuredMinHeight = height;
	        }
		
			/**
			 * The flow layout algorithm was written by Eric Cancil
			 * http://blog.appdivision.com/2009/02/18/flex-flowcontainer/
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{	        	
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				var prevTallest:Number = 0;
				var prevWidest:Number = 0;
				var tallestForRow:Number = 0;
				var rowNumber:Number = -1;    
				var widestForColumn:Number = 0;
				var columnNumber:Number = -1;        
				
				for (var i:Number = 0; i < numChildren; i ++)
				{
					var child:UIComponent = getChildAt(i) as UIComponent;
					
					if (child.height >= tallestForRow)
					{
						prevTallest = tallestForRow;
						tallestForRow = child.height;
					}
					
					if (i == 0)
					{
						child.x = child.y = 0;
					}
					else
					{
						var prevChild:DisplayObject = getChildAt(i - 1);
						var newWidth:Number = prevChild.width + prevChild.x;
						var newHeight:Number = prevChild.y;
						
						if (newWidth + child.minWidth > width)
						{
							child.x = 0;
							
							if (child.height == tallestForRow)
							{
								child.y = newHeight + prevTallest;
							}
							else
							{
								child.y = newHeight + tallestForRow;
							}
							
							tallestForRow = child.height;                            
						}
						else
						{
							child.x = newWidth;
							child.y = prevChild.y;
						}
					}
				}
			}           

						
		]]>
	</mx:Script>
	
	<ButtonTextInput id="buttonTextInput" change="handleChange(event)" width="100%"/>
	
</mx:Canvas>