<?xml version="1.0" encoding="utf-8"?>
<AutoComplete 
	xmlns="com.hillelcoren.components.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml">
	
	<mx:Script>
		<![CDATA[
			import mx.containers.GridRow;
			import mx.containers.GridItem;
			import mx.core.UIComponent;
			import mx.containers.VBox;
			import mx.containers.HBox;
			import mx.managers.PopUpManager;
			import mx.core.IFlexDisplayObject;
			import mx.core.Application;
			import mx.controls.Button;
			import mx.collections.ArrayCollection;
			import com.hillelcoren.components.autoComplete.interfaces.IBrowser;
			import com.hillelcoren.components.autoComplete.classes.*;
			
			private var _isBrowseable:Boolean;
			private var _isBrowseableChanged:Boolean;
			private var _browseButton:Button;
			
			private var _browser:IBrowser;
			private var _useListBuilder:Boolean;
			private var _browserFields:Array;
			protected var _browserClass:Class = Browser;
			protected var _listBuilderClass:Class = ListBuilder;
			private var _browserItemRenderer:IFactory;
			private var _browseButtonGridItem:GridItem;
			
			private var _browseLabel:String = "Browse";
			private var _removeLabel:String = "Remove";	
						
			private var _multiSelectLayout:String = LAYOUT_VERTICAL;
			private var _multiSelectLayoutChanged:Boolean;
			private var _multiSelect:MultiSelect;

			private var _isOrderable:Boolean;
			private var _isOrderableChanged:Boolean;			
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (_isBrowseableChanged)
				{
					_isBrowseableChanged = false;
					showBrowseButton( _isBrowseable );
				}
				
				if (_isOrderableChanged)
				{
					_isOrderableChanged = false;
					showOrderingButtons( _isOrderable );
				}
				
				if (_multiSelectLayoutChanged)
				{
					_multiSelectLayoutChanged = false;
					
					_selectedItems.removeAll();
					_showSelectedItems = _multiSelectLayout == LAYOUT_HORIZONTAL;
					
					var showMultiSelect:Boolean = (_multiSelectLayout == LAYOUT_VERTICAL && _isMultiSelect);
					showMultiSelectList( showMultiSelect );																			
				}							
			}
						
			private function handleBrowseClick( event:Event ):void
			{
				if (!_dataProvider)
				{
					return;
				}
				
				var useListBuilder:Boolean = _useListBuilder && _isMultiSelect;
				
				if (useListBuilder)
				{
					_browser = new _listBuilderClass();	
					ListBuilder( _browser ).isOrderable = _isOrderable;
				}
				else
				{
					_browser = new _browserClass();
					Browser( _browser ).browserFields = _browserFields;
					Browser( _browser ).isMultiSelect = _isMultiSelect;					
				}
				
				var dp:ArrayCollection = new ArrayCollection( _dataProvider.source );
				dp.sort = _dataProvider.sort;
				dp.refresh();
				
				_browser.dataProvider = dp;
				_browser.filterFunction = _filterFunction;
				_browser.title = "Browse";
				_browser.labelFunction = _labelFunction;
				_browser.addEventListener( Event.CHANGE, handleBrowserChange );
				
				if (_isMultiSelect || useListBuilder)
				{
					_browser.originalSelectedItems = _selectedItems;
				}
							
				PopUpManager.addPopUp( IFlexDisplayObject( _browser ), DisplayObject( Application.application), true );
				PopUpManager.centerPopUp( IFlexDisplayObject( _browser ) );
				
				_browser.init();
				
				if (!useListBuilder && _selectedItems.length == 0)
				{
					Browser( _browser ).searchStr = searchText;
				}													
			}
			
			private function handleBrowserChange( event:Event ):void
			{
				var item:Object;
				
				if (useListBuilder || !_isMultiSelect)
				{
					_selectedItems.removeAll();				
				}
				
				for each (item in _browser.selectedItems)
				{
					_selectedItems.addItem( item );				
				}					
				
				PopUpManager.removePopUp( IFlexDisplayObject( _browser ) );
				
				if (_isMultiSelect && _multiSelectLayout == LAYOUT_HORIZONTAL)
				{
					searchText = null;
				}
				
				setFocus();
				dispatchEvent( new Event( Event.CHANGE ) );
			}			
			
			private function handleMultiSelectChange( event:Event ):void
			{
				dispatchEvent( event );
			}
			
			private function showBrowseButton( show:Boolean ):void
			{
				if (show && _browseButton == null)
				{
					_browseButton = new Button();
					_browseButton.label = _browseLabel;
					_browseButton.width = Consts.BUTTON_WIDTH;
					_browseButton.addEventListener( MouseEvent.CLICK, handleBrowseClick );
				}
				
				if (show)
				{
					_browseButtonGridItem = new GridItem();
					_browseButtonGridItem.addChild( _browseButton );
					mainGridRow.addChild( _browseButtonGridItem );									
				}
				else if ( _browseButton != null )
				{
					mainGridRow.removeChild( _browseButtonGridItem );
				}			
				
				sizeFlowBox();
				sizeTextInput();				
			}
			
			private function showOrderingButtons( show:Boolean ):void
			{
				if (!_multiSelect)
				{
					return;
				}
				
				_multiSelect.isOrderable = show;
			}
			
			private function showMultiSelectList( show:Boolean ):void
			{
				if (show && _multiSelect == null)
				{
					_multiSelect = new MultiSelect();
					_multiSelect.labelFunction = _labelFunction;
					_multiSelect.addEventListener( Event.CHANGE, handleMultiSelectChange );
					_multiSelect.dataProvider = _selectedItems;					
					_multiSelect.isOrderable = _isOrderable;
					_multiSelect.removeLabel = _removeLabel;
				}
				
				if (show)
				{
					addChildAt( _multiSelect, 0 );				
				}
				else if (_multiSelect && _multiSelect.parent)
				{
					removeChild( _multiSelect );					
				}
				
				sizeFlowBox();
				sizeTextInput();				

				_selectedItems.removeAll();											
			}
			
			private function sizeFlowBox():void
			{
				var width:int = width;
				
				if (_isBrowseable || _multiSelectLayout == LAYOUT_VERTICAL)
				{
					width -= Consts.BUTTON_WIDTH + 10;
				}
				
				flowBox.width = width;
			}
			
			[Inspectable(enumeration="horizontal,vertical")]
			/**
			 * When isMultiSelect is set to true, this specifies whether to layout the selected
			 * items horizontally (in a flow layout) or vertically (in a List).
			 * @default horizontal
			 */
			public function set multiSelectLayout( value:String ):void
			{
				_multiSelectLayout = value;
				_multiSelectLayoutChanged = true;
				
				invalidateProperties();
			}
			
			[Inspectable(enumeration="false,true")]
			/**
			 * A flag that indicates whether or not to display the browse button.
			 * Clicking the browse button will show either a DataGrid or a List (depending
			 * on whether the dataProvider contains Objects or Strings). It useListBuilder
			 * is enabled an alternate List Builder browser will be displayed
			 * @default false
			 */
			public function set isBrowseable( value:Boolean ):void
			{
				_isBrowseable = value;
				_isBrowseableChanged = true;
				
				invalidateProperties();
			}
			
			[Inspectable(enumeration="false,true")]
			/**
			 * A flag that indicates whether or not we display the ordering buttons and allow the 
			 * items to be drag-and-drop reorderd. This is only enabled when isMultiSelect is
			 * set to true and the multiSelectLayout property is set to AutoComplete.LAYOUT_VERTICAL
			 */
			public function set isOrderable( value:Boolean ):void
			{
				_isOrderable = value;
				_isOrderableChanged = true;
				
				invalidateProperties();
			}
			
			[Inspectable(enumeration="false,true")]
			public function set useListBuilder( value:Boolean ):void
			{
				_useListBuilder = value;
			}
			
			/**
			 * If this is set to true, when the user clicks the Browse button we'll  
			 * display the List Builder (rather than a DataGrid or List). <p> 
			 * The List Builder contains two lists next to each other. The user can add/remove 
			 * items by selecting them and clicking the move left/move right buttons or by
			 * drag and dropping the items betweent the lists
			 * @default false
			 */
			public function get useListBuilder():Boolean
			{
				return _useListBuilder;
			}
			
			/**
			 * The fields/columns to display in the browse window. If listBuilder is enable
			 * this property is ignored.
			 */
			public function set browserFields( value:Array ):void
			{
				_browserFields = value;
			}
						
			public function get browserClass():Class
			{
				return _browserClass;
			}
			
			public function set browserClass( value:Class ):void
			{
				_browserClass = value;
			}
			
			/**
			 * The text value for the label the browse button. 
			 * @default Browse
			 */
			public function set browseLabel( value:String ):void
			{
				_browseLabel = value;
			}			
			
			/**
			 * The text value for the label the remove button.
			 * @default Remove
			 */
			public function set removeLabel( value:String ):void
			{
				_removeLabel = value;
			}
						
			/**
			 * Returns the next available (un-selected) item in the data provider
			 */ 
			public function getNextItem():*
			{
				filterData();
				
				if (dataProvider.length > 0)
				{
					return dataProvider.getItemAt( 0 );
				}
				else
				{
					return null;
				}
			}
			
		]]>
	</mx:Script>
		
</AutoComplete>